# ==============================
# D√©claration des variables
# ==============================
PYTHON=python3
ENV_NAME=venv
REQUIREMENTS=requirements.txt
DATA_FILE=churn-data.csv
MODEL_PATH=model.joblib

# ==============================
# 1. Configuration de l'environnement
# ==============================
.PHONY: setup
setup:
	@echo "üîß Cr√©ation de l'environnement virtuel et installation des d√©pendances..."
	@$(PYTHON) -m venv $(ENV_NAME)
	@. $(ENV_NAME)/bin/activate && pip install -r $(REQUIREMENTS)

# ==============================
# 2. V√©rification et formatage du code
# ==============================
.PHONY: lint format security
lint:
	@echo "üîç V√©rification du style du code avec flake8..."
	@. $(ENV_NAME)/bin/activate && flake8 .

format:
	@echo "üìù Formatage automatique du code avec black..."
	@. $(ENV_NAME)/bin/activate && black .

security:
	@echo "üîí V√©rification des vuln√©rabilit√©s du code avec bandit..."
	@. $(ENV_NAME)/bin/activate && bandit -r .

quality: lint format security
# chargement base de donne et upload server
.PHONY: mysql_up mysql_load_data

mysql_up:
	@echo "üöÄ D√©marrage de MySQL avec Docker..."
	@docker-compose up -d

# ==============================
# 3. Chargement et pr√©paration des donn√©es
# ==============================
.PHONY: data
data:
	@echo "üîÑ Pr√©paration des donn√©es (train/test split)..."
	@. $(ENV_NAME)/bin/activate && $(PYTHON) main.py prepare --data $(DATA_FILE)

# ==============================
# 4. Entra√Ænement du mod√®le
# ==============================
.PHONY: train
train: data
	@echo "ü§ñ Entra√Ænement du mod√®le..."
	@. $(ENV_NAME)/bin/activate && $(PYTHON) main.py train --data $(DATA_FILE)

# ==============================
# 5. √âvaluation du mod√®le
# ==============================
.PHONY: evaluate
evaluate: train
	@echo "üìä √âvaluation du mod√®le..."
	@. $(ENV_NAME)/bin/activate && $(PYTHON) main.py evaluate --data $(DATA_FILE)

# ==============================
# 6. Sauvegarde du mod√®le
# ==============================
.PHONY: save
save: train
	@echo "üíæ Sauvegarde du mod√®le..."
	@. $(ENV_NAME)/bin/activate && $(PYTHON) main.py save --data $(DATA_FILE) --save $(MODEL_PATH)

# ==============================
# 7. Chargement d'un mod√®le existant
# ==============================
.PHONY: load
load:
	@echo "üì• Chargement du mod√®le..."
	@. $(ENV_NAME)/bin/activate && $(PYTHON) main.py load --load $(MODEL_PATH)

# ==============================
# 8. Ex√©cution des tests
# ==============================
.PHONY: test_unit test_pipeline

test_unit:
	@echo "üß™ Ex√©cution des tests unitaires..."
	@. $(ENV_NAME)/bin/activate && pytest test_pipeline.py -k "test_load_data or test_prepare_data or test_train_model"

test_pipeline:
	@echo "üõ† Ex√©cution des tests fonctionnels..."
	@. $(ENV_NAME)/bin/activate && pytest test_pipeline.py -k "test_evaluate_model"

# ==============================
# 9. D√©marrage du serveur Jupyter Notebook
# ==============================
.PHONY: notebook
notebook:
	@echo "üìî D√©marrage de Jupyter Notebook..."
	@. $(ENV_NAME)/bin/activate && jupyter notebook

# ==============================
# 10. Nettoyage des fichiers temporaires
# ==============================
.PHONY: clean
clean:
	@echo "üßπ Nettoyage des fichiers inutiles..."
	@rm -rf __pycache__ .pytest_cache .mypy_cache $(ENV_NAME)
	@find . -type d -name "*.egg-info" -exec rm -rf {} +
	@find . -type f -name "*.pyc" -delete
	@find . -type d -name "*.ipynb_checkpoints" -exec rm -rf {} +
